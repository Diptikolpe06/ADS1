#include<iostream>
using namespace std;

const int MAX_LENGTH = 100; // Maximum length for title and author

int n, i;

class library {
public:
    int ISBN;
    char *title, *author;

    void addBook();
    void search();
    void removeBook();
    void display();
} b[10];

void library::addBook() {
    title = new char[MAX_LENGTH];
    author = new char[MAX_LENGTH];
    cout << "\nEnter Book ISBN no, Title, Author name: ";
    cin >> ISBN >> title >> author;
}

void library::search() {
    int s, f = 0;
    cout << "\nEnter book ISBN no. which we want to search: ";
    cin >> s;
    for (i = 0; i < n; i++) {
        if (b[i].ISBN == s) {
            f = 1;
            cout << "\nBook is found";
            cout << "\nISBN\tTITLE\tAUTHOR";
            b[i].display();
            break;
        }
    }
    if (f == 0) {
        cout << "\nBook is not found.";
    }
}

void library::removeBook() {
    int d, f = 0;
    cout << "\nEnter book ISBN no. which we want to delete: ";
    cin >> d;
    for (i = 0; i < n; i++) {
        if (b[i].ISBN == d) {
            f = 1;
            cout << "\nRecord deleted successfully";
            n--;
            break;
        }
    }
    if (f == 0) {
        cout << "\nRecord is not found";
    }
}

void library::display() {
    cout << "\n" << ISBN << "\t" << title << "\t" << author;
}

int main() {
    int ch;
    char press;
    cout << "\nEnter total no. of books :";
    cin >> n;
    do {
        cout << "\nEnter your choice: ";
        cout << "\n1.ADD BOOK\n2.DISPLAY\n3.SEARCH\n4.REMOVE\n";
        cin >> ch;
        switch (ch) {
            case 1:
                for (i = 0; i < n; i++) {
                    b[i].addBook();
                }
                cout << "\nAdded successfully";
                break;
            case 2:
                cout << "\nAvailable books: ";
                cout << "\nISBN\tTITLE\tAUTHOR";
                for (i = 0; i < n; i++) {
                    b[i].display();
                }
                break;
            case 3:
                b[0].search(); // Assuming search is performed on the first book only
                break;
            case 4:
                b[0].removeBook(); // Assuming removal is performed on the first book only
                break;
        }
        cout << "\nDo you want to continue: ";
        cin >> press;
    } while (press == 'y' || press == 'Y');
}
